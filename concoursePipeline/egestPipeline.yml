resource_types:
  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource
  - name: terraform
    type: docker-image
    source:
      repository: ljfranklin/terraform-resource
      tag: latest
      
resources:
  - name: base-go-image
    type: docker-image
    source:
      repository: golang
      tag: 1.13.4-stretch

  - name: ecr-image-egest
    type: docker-image
    source:
      repository: 226575302242.dkr.ecr.eu-west-2.amazonaws.com/takeon-validation-cicd
      tag: egestion
      aws_access_key_id: ((aws.aws_access_key))
      aws_secret_access_key: ((aws.aws_secret_access_key))

  - name: egest-repository
    type: pull-request
    check_every: 2m
    source:
      repository: ONSdigital/takeon-egest-pipeline
      access_token: ((aws.git_access_token))

  - name: egest-deploy-repository
    type: git
    check_every: 24h
    source:
      uri: https://github.com/ONSdigital/takeon-egest-pipeline.git
      paths: 
        - takeon-dbexport/
      branch: dev
  
  - name: takeon-egest-pipeline-git-repo
    type: git
    source:
      uri: https://github.com/ONSdigital/takeon-egest-pipeline.git
      paths:
        - aws-infrastructure/
      branch: dev

  - name: egest-terraform-state
    type: terraform
    source:
      backend_type: s3
      backend_config:
        bucket: takeon-terraform-state
        key: {{egest_state_file}}
        region: {{aws_region}}
        access_key: ((aws.aws_access_key))
        secret_key: ((aws.aws_secret_access_key))
        dynamodb_table: takeon-terraform-state
        vars:
          environment_name: {{environment_name}}
          environment_name_vpc: {{environment_name_vpc}}
          user: {{user}}
        env:
          AWS_ACCESS_KEY_ID: ((aws.aws_access_key))
          AWS_SECRET_ACCESS_KEY: ((aws.aws_secret_access_key)) 

jobs:
  - name: installing-dependencies-egest
    serial_groups: [rebuild-egest]
    plan:
      - in_parallel: 
        - get: egest-repository
        - get: base-go-image
          params:
            save: true

      - put: ecr-image-egest
        params:
          load_base: base-go-image
          build: egest-repository/takeon-dbexport
          save: true
          cache: true
          cache_tag: egestion
        get_params:
          skip_download: true

  - name: terraform-egest-apply
    plan:
      - get: takeon-egest-pipeline-git-repo
        trigger: true
      - put: egest-terraform-state
        params:
          terraform_source: takeon-egest-pipeline-git-repo/aws-infrastructure/
          action: apply
          env_name: {{environment_name}}
          vars:
            environment_name: {{environment_name}}
            environment_name_vpc: {{environment_name_vpc}}
            user: {{user}}    

  - name: egest-deploy
    plan:
      - get: egest-deploy-repository
        trigger: true
      - task: serverless-aws
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 226575302242.dkr.ecr.eu-west-2.amazonaws.com/takeon-validation-cicd
              tag: egestion
              aws_access_key_id: ((aws.aws_access_key))
              aws_secret_access_key: ((aws.aws_secret_access_key))
          params:
            AWS_ACCESS_KEY_ID: ((aws.aws_access_key))
            AWS_SECRET_ACCESS_KEY: ((aws.aws_secret_access_key))
            SLS_DEBUG: 1
          inputs:
            - name: egest-deploy-repository
              path: /go/src/github.com/takeon-egest-pipeline
          run:
            path: sh
            args:
              - -c
              - |
                SRCPATH=$PWD/go/src/github.com/takeon-egest-pipeline/takeon-dbexport
                GOPATH=$PWD/go
                cd $SRCPATH
                go get -t -v ./...
                env GOOS=linux go build  -o bin/main
                serverless package --package pkg
                serverless deploy --verbose;